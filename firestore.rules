rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow create: if isAdmin();
      allow update: if isAdmin() || (request.auth.uid == userId && 
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']));
      allow delete: if isAdmin();
    }

    // Purchase Orders rules
    match /purchaseOrders/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Suppliers rules
    match /suppliers/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Types rules
    match /types/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Settings rules
    match /settings/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
} 